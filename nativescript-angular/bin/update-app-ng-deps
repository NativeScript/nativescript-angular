#!/usr/bin/env node

const path = require("path");
const fs = require("fs");

const browserDynamicDependency = "@angular/platform-browser-dynamic";
const binPath = __dirname;
const pluginPath = path.dirname(binPath);
const pluginPackageJsonPath = path.join(pluginPath, "package.json");
const pluginPackageJson = JSON.parse(fs.readFileSync(pluginPackageJsonPath, "utf8"));

const isNgDependency = name => name.startsWith("@angular") ||
    name === "rxjs" ||
    name === "zone.js" ||
    name === "typescript";

function updateDeps(deps, devDeps, newDeps) {
    Object.keys(newDeps)
        .filter(isNgDependency)
        .map(dependencyName => ({
            dependencyName,
            version: newDeps[dependencyName]
        }))
        .forEach(({ dependencyName, version }) => {
            if (devDeps[dependencyName]) {
                devDeps[dependencyName] = version;
            } else {
                deps[dependencyName] = version;
            }

            console.log(`Updated dependency ${dependencyName} to version: ${version}.`);
        });

    const ngDep = Object.keys(newDeps).find(dep => dep.startsWith("@angular"));
    const version = newDeps[ngDep];
    if (deps["@angular/animations"]) {
        deps["@angular/animations"] = version;
    }

    if (deps["@angular/compiler-cli"]) {
        deps["@angular/compiler-cli"] = version;
    }
}

const pluginDeps = pluginPackageJson.peerDependencies;
const projectPath = process.env.INIT_CWD || path.dirname(path.dirname(pluginPath));
const appPackageJsonPath = path.join(projectPath, "package.json");
const appPackageJson = JSON.parse(fs.readFileSync(appPackageJsonPath, "utf8"));

const { dependencies, devDependencies } = appPackageJson;
updateDeps(dependencies, devDependencies, pluginDeps);

fs.writeFileSync(appPackageJsonPath, JSON.stringify(appPackageJson, null, 2));

console.log("\nAngular dependencies updated. Don't forget to run `npm install`.");
