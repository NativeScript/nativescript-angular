#!/usr/bin/env node

const path = require("path");
const fs = require("fs");

const binPath = __dirname;
const pluginPath = path.dirname(binPath);
const pluginPackageJsonPath = path.join(pluginPath, "package.json");
const pluginPackageJson = JSON.parse(fs.readFileSync(pluginPackageJsonPath, "utf8"));
const pluginPeerDeps = pluginPackageJson.peerDependencies;

const projectPath = path.dirname(path.dirname(pluginPath));
const appPackageJsonPath = path.join(projectPath, "package.json");
const appPackageJson = JSON.parse(fs.readFileSync(appPackageJsonPath, "utf8"));

const shouldUpdateDependency = name => name.startsWith("@angular") ||
    name === "rxjs" ||
    name === "zone.js";

let updatedDependencies = appPackageJson.dependencies;

// set app dependencies to ones required from plugin (peer)
Object.keys(pluginPeerDeps)
    .filter(shouldUpdateDependency)
    .forEach(dependencyName => {
        const version = pluginPackageJson.peerDependencies[dependencyName];
        updatedDependencies[dependencyName] = version;
        console.log(`Updated dependency ${dependencyName} to version: ${version}.`);
    });

// remove platform-browser-dynamic if present
const browserDynamicDependency = "@angular/platform-browser-dynamic";
if (updatedDependencies.hasOwnProperty(browserDynamicDependency)) {
    delete updatedDependencies[browserDynamicDependency];
    console.log(`Removed ${browserDynamicDependency}`);
}

let updatedPackageJson = appPackageJson;
updatedPackageJson.dependencies = updatedDependencies;

fs.writeFileSync(appPackageJsonPath, JSON.stringify(updatedPackageJson, null, 2));

console.log("\nAngular dependencies updated. Don't forget to run `npm install`.");
