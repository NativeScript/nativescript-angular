#!/usr/bin/env node

const path = require("path");
const fs = require("fs");

const binPath = __dirname;
const pluginPath = path.dirname(binPath);
const pluginPackageJsonPath = path.join(pluginPath, "package.json");
const pluginPackageJson = JSON.parse(fs.readFileSync(pluginPackageJsonPath, "utf8"));

const isNgDependency = name => name.startsWith("@angular") ||
    name === "rxjs" ||
    name === "zone.js" ||
    name === "typescript";

const update = (deps, dep) => {
    if (deps[dep.dependencyName]) {
        deps[dep.dependencyName]=dep.version;
        console.log(`Updated dependency ${dep.dependencyName} to version: ${dep.version}.`);
    }
}

function updateDeps(deps, devDeps, newDeps) {
    Object.keys(newDeps)
        .filter(isNgDependency)
        .map(dependencyName => ({
            dependencyName,
            version: newDeps[dependencyName]
        }))
        .forEach(({ dependencyName, version }) => {
            update(devDeps, { dependencyName, version });
            update(deps, { dependencyName, version });
        });
}

const pluginDeps = pluginPackageJson.peerDependencies;
const animationDep = { "@angular/animations": pluginDeps["@angular/core"] };
const depsToUpdate = Object.assign(pluginDeps, animationDep);

const projectPath = process.env.INIT_CWD || path.dirname(path.dirname(pluginPath));
const appPackageJsonPath = path.join(projectPath, "package.json");
const appPackageJson = JSON.parse(fs.readFileSync(appPackageJsonPath, "utf8"));

const { dependencies, devDependencies } = appPackageJson;
updateDeps(dependencies, devDependencies, depsToUpdate);

fs.writeFileSync(appPackageJsonPath, JSON.stringify(appPackageJson, null, 2));

console.log("\nAngular dependencies updated. Don't forget to run `npm install`.");
